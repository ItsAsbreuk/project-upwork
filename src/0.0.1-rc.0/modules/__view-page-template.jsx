"use strict";

/**
 * React-Component, the main page-template that renderes the complete html-file
 * Will be used for every html-file that is rendered by the framework
 *
 * <i>Copyright (c) 2015 ezHome - http://ezhome.com</i><br>
 * Proprietary License
 *
 *
 * @module modules/__view-page-template.jsx
 * @class HtmlPage
 * @since 2.0.0
*/

import React, {PropTypes} from "react";
import TransferedProperties from "itsa-react-server-webpack-builder/core-components/transfered-properties";
const NON_CLIENT_PROPS = {
    "__itsacommonscript": true,
    "__itsapagescript": true,
    "__itsapagelinkcss": true,
    "__itsapageinlinecss": true
};

const HtmlPage = React.createClass({

    propTypes: {
        /**
         * meta char-set
         *
         * @property __charset
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __charset: PropTypes.string.isRequired,

        /**
         * meta description
         *
         * @property __description
         * @protected
         * @private
         * @type String
         * @since 2.0.0
        */
        __description: PropTypes.string.isRequired,

        /**
         * The device that the visitor is using: "desktop", "tablet" or "mobile"
         *
         * @property __device
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __device: PropTypes.string.isRequired,

        /**
         * Google-analytics api-key
         *
         * @property __ga
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __ga: PropTypes.string,

        /**
         * Url for the shared script-file. This files is generated by webpack as common-script,
         * and also holds all webpack-functionality which runs on the client.
         *
         * @property __itsacommonscript
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __itsacommonscript: PropTypes.string,

        /**
         * The bundled inline css content: bundled for this specific pageview only
         *
         * @property __itsapageinlinecss
         * @type Object
         * @protected
         * @private
         * @since 2.0.0
        */
        __itsapageinlinecss: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),

        /**
         * Url for the bundled css: bundled for this specific pageview only
         *
         * @property __itsapagelinkcss
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __itsapagelinkcss: PropTypes.string,

        /**
         * Url for the page(view)-specific script-file. This files is generated by webpack as a chunck-file.
         *
         * @property __itsapagescript
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __itsapagescript: PropTypes.string,

        /**
         * The language to be used for this page. Is being controlled by the visitor,
         * either by its lang-preferences, or whenever the visitor changes to another
         * language through the web-application (f.e. "en").
         *
         * @property __lang
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __lang: PropTypes.string.isRequired,

        /**
         * The title for the page
         *
         * @property __title
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __title: PropTypes.string.isRequired,

        /**
         * The name of the page"s view
         *
         * @property __view
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __view: PropTypes.string.isRequired,

        /**
         * meta viewport
         *
         * @property __viewport
         * @type String
         * @protected
         * @private
         * @since 2.0.0
        */
        __viewport: PropTypes.string.isRequired,

        /**
         * The Component its children, which basicly consist of one react-component: the view.
         *
         * @property children
         * @type Object
         * @since 2.0.0
        */
        children: PropTypes.object
    },

    /**
     * React render-method --> renderes the Component.
     *
     * @method render
     * @return ReactComponents
     * @since 2.0.0
     */
    render() {
        let googleAnalyticsInit, gaInit, ga, pagecss, gaInitScript, googleAnalyticsGa, keys, clientProps;
        const that = this,
            commonscript = this.props.__itsacommonscript && <script src={this.props.__itsacommonscript} />,
            pagescript = this.props.__itsapagescript && <script src={this.props.__itsapagescript} />;

        // if "google-analytics" api-key is defined inside "reactserver.config.json", then
        // insert the Google-analytics script:
        if (this.props.__ga) {
            gaInitScript = "(function(i,s,o,g,r,a,m){i[\"GoogleAnalyticsObject\"]=r;i[r]=i[r]||function(){"+
                "(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),"+
                "m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)"+
                "})(window,document,\"script\",\"//www.google-analytics.com/analytics.js\",\"ga\");";
            gaInit = {__html: gaInitScript};
            googleAnalyticsInit = <script dangerouslySetInnerHTML={gaInit} />;
            ga = {__html: "ga(\"create\",\""+this.props.__ga+"\",\"auto\");ga(\"send\",\"pageview\");"};
            googleAnalyticsGa = <script dangerouslySetInnerHTML={ga} />;
        }

        // if "inline-css" is set false (inside "reactserver.config.json"), then use css with a link-element:
        // otherwise use inline css
        // note, that on the client the link-css will be transformed into inline css
        if (this.props.__itsapagelinkcss) {
            pagecss = (<link
                data-src="inline"
                href={this.props.__itsapagelinkcss}
                rel="stylesheet" />);
        } else if (this.props.__itsapageinlinecss) {
            pagecss = (<style
                dangerouslySetInnerHTML={this.props.__itsapageinlinecss}
                data-src="inline"
                type="text/css" />);
        }

        // clone the props-oject, but leave some parts out:
        // don"t send the heavy script and css, they are not needed as props on the client:
        clientProps = {};
        keys = Object.keys(this.props);
        keys.forEach(function(key) {
            if (!NON_CLIENT_PROPS[key]) {
                clientProps[key] = that.props[key];
            }
        });

        return (
            <html data-device={this.props.__device} data-page={this.props.__view} lang={this.props.__lang}>
            <head>
                <meta charSet={this.props.__charset} />
                <meta content={this.props.__viewport} name="viewport" />
                <meta content={this.props.__description} name="description" />
                {pagecss}
                <title>{this.props.__title}</title>

                <meta content="IE=edge" httpEquiv="X-UA-Compatible" />
                <base href="/" />

                <link href="/images/favicon/favicon.ico" rel="shortcut icon" type="image/x-icon" />

                <link href="/images/favicon/favicon-57x57.png" rel="apple-touch-icon" sizes="57x57" />
                <link href="/images/favicon/favicon-60x60.png" rel="apple-touch-icon" sizes="60x60" />
                <link href="/images/favicon/favicon-72x72.png" rel="apple-touch-icon" sizes="72x72" />
                <link href="/images/favicon/favicon-76x76.png" rel="apple-touch-icon" sizes="76x76" />
                <link href="/images/favicon/favicon-114x114.png" rel="apple-touch-icon" sizes="114x114" />
                <link href="/images/favicon/favicon-120x120.png" rel="apple-touch-icon" sizes="120x120" />
                <link href="/images/favicon/favicon-144x144.png" rel="apple-touch-icon" sizes="144x144" />
                <link href="/images/favicon/favicon-152x152.png" rel="apple-touch-icon" sizes="152x152" />

                <link href="/images/favicon/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png" />
                <link href="/images/favicon/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png" />
                <link href="/images/favicon/favicon-48x48.png" rel="icon" sizes="48x48" type="image/png" />
                <link href="/images/favicon/favicon-64x64.png" rel="icon" sizes="64x64" type="image/png" />
                <link href="/images/favicon/favicon-96x96.png" rel="icon" sizes="96x96" type="image/png" />
                <link href="/images/favicon/favicon-192x192.png" rel="icon" sizes="192x192" type="image/png" />

                <link href="/images/favicon/manifest.json" rel="manifest" />

                <meta content="#0c793d" name="msapplication-TileColor" />
                <meta content="/images/favicon/favicon-white-144x144.png" name="msapplication-TileImage" />
                <meta content="#0c793d" name="theme-color" />

                {googleAnalyticsInit}
            </head>
            <body>
                <div id="view-container">
                    {this.props.children}
                </div>
                <TransferedProperties clientProps={clientProps} />
                {commonscript}
                {pagescript}
                {googleAnalyticsGa}
            </body>
            </html>
        );
    }
});

export default HtmlPage;
